local g_Root = getRootElement ()local g_ResRoot = getResourceRootElement ()local g_SyncingPlayers = {}local g_PlayersCache = {}addEvent ( "onClientPlayerControls", true )addEvent ( "onSyncControlsReq", true )local function KbspGetControls ( player )	local w = getControlState ( player, "accelerate" ) and "1" or "0"	local s = getControlState ( player, "brake_reverse" ) and "1" or "0"	local a = getControlState ( player, "vehicle_left" ) and "1" or "0"	local d = getControlState ( player, "vehicle_right" ) and "1" or "0"		local space = getControlState ( player, "handbrake" ) and "1" or "0"		local up = getControlState ( player, "steer_forward" ) and "1" or "0"	local down = getControlState ( player, "steer_back" ) and "1" or "0"		return w..s..a..d..space..up..downendlocal function KbspUpdate ()	--outputDebugString ( "KbspUpdate", 3 )		for player, v in pairs ( g_SyncingPlayers ) do		local target = getCameraTarget ( player )		local veh = getPedOccupiedVehicle ( player )				if ( isElement(target) and target ~= player and target ~= veh ) then			local data = KbspGetControls ( target )						if ( g_PlayersCache[target] ~= data ) then				triggerClientEvent ( player, "onClientPlayerControls", target, data )				--outputDebugString ( "Sending keys to "..getPlayerName ( player ), 3 )				g_PlayersCache[target] = data			end		end	endendlocal function KbspInit ()	setTimer ( KbspUpdate, 100, 0 )endlocal function KbspSyncControlsReq ( enabled )	if ( enabled ) then		g_SyncingPlayers[client] = true	else		g_SyncingPlayers[client] = nil	endendlocal function KbspOnPlayerQuit ()	g_SyncingPlayers[source] = nil	g_PlayersCache[source] = nilendaddEventHandler ( "onResourceStart", g_ResRoot, KbspInit )addEventHandler ( "onSyncControlsReq", g_Root, KbspSyncControlsReq )addEventHandler ( "onPlayerQuit", g_Root, KbspOnPlayerQuit )